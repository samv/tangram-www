[% top = '../../' %]
[% title = 'POD: Tangram::IDBIF - Intuitive DataBase InterFace' %]
[% INCLUDE header.tt %]


<p><a name="__index__"></a></p>
<!-- INDEX BEGIN -->

<ul>

	<li><a href="#name">NAME</a></li>
	<li><a href="#synopsis">SYNOPSIS</a></li>
	<li><a href="#description">DESCRIPTION</a></li>
	<ul>

		<li><a href="#links_to_other_objects">LINKS TO OTHER OBJECTS</a></li>
		<li><a href="#but__i_really__really_hate_schemas_">BUT, I REALLY, REALLY HATE SCHEMAS!</a></li>
	</ul>

</ul>
<!-- INDEX END -->

<hr />
<p>
</p>
<h1><a name="name">NAME</a></h1>
<p>Tangram::IDBIF - Intuitive DataBase InterFace</p>
<p>
</p>
<hr />
<h1><a name="synopsis">SYNOPSIS</a></h1>
<pre>
  # ... in a nearby Tangram::Schema structure ...
  SomeClass =&gt;
    { fields =&gt;
      { idbif =&gt; {
            -options =&gt; { dumper =&gt; 'Data::Dumper',
                        },
            some_field =&gt; undef,
            some_property =&gt; undef,
            some_attribute =&gt; undef,
            each_one =&gt; undef,
            gets =&gt; undef,
            saved =&gt; undef,
        },
        string =&gt; {
            cheese =&gt; undef,
        },
      },
    };</pre>
<p>
</p>
<hr />
<h1><a name="description">DESCRIPTION</a></h1>
<p>The <strong>idbif</strong> mapping type collates multiple data members into a single
<strong>perl_dump</strong> (see <a href="/docs/Tangram/PerlDump.html">the Tangram::PerlDump manpage</a>), <strong>storable</strong> (see
<a href="/docs/Tangram/Storable.html">the Tangram::Storable manpage</a>) or <strong>yaml</strong> (see <a href="/docs/Tangram/YAML.html">the Tangram::YAML manpage</a>) column.</p>
<p>For instance, with the schema definition in the example, all the
columns in the example would be serialised via Data::Dumper.</p>
<p>If you stored an object like this:</p>
<pre>
  $cheese = bless { cheese   =&gt; &quot;gouda&quot;,
                    gets     =&gt; 6,
                    each_one =&gt; 9 }, &quot;SomeClass&quot;;</pre>
<p>You would see something in your database similar to:</p>
<pre>
  /^'--v------v--------v----------------------------'^\
  | id | type | cheese | idbif                        |
  &gt;----o------o--------o------------------------------&lt;
  |  1 |   42 |  gouda | { gets =&gt; 6, each_one =&gt; 9 } |
  \_,--^------^--------^----------------------------._/</pre>
<p>(note: the actual output from your SQL Database client may differ from
the above)</p>
<p>So, if you're the sort of person who likes to set their attributes
with accessors, but doesn't like the overhead this places on the
RDBMS... then this may help.  Note: the real benefits of this mapping
type are for when you're storing more complex data structures than ``6''
and ``9'' :-).</p>
<p>You may prefer to use the default dumping type, which is <strong>storable</strong>.</p>
<p>
</p>
<h2><a name="links_to_other_objects">LINKS TO OTHER OBJECTS</a></h2>
<p>If Tangram encounters another object which <strong>is already in storage</strong>
(ie, has been inserted via <code>$storage-&gt;insert($foo)</code>), then it
will store a ``Memento''.  This memento includes the object ID, which is
sensitive to schema changes (the ordering of classes in the schema).</p>
<p>If the class implements a <code>px_freeze</code> and <code>px_thaw</code> function, then
there will be a ``Memento'' that includes the class name of the object,
and the data that was returned by the class' <code>px_freeze</code> method.  To
be reconstituted, it is called as:</p>
<pre>
  SomeClass-&gt;px_thaw(@data)</pre>
<p>See <a href="/docs/Tangram/Dump.html">the Tangram::Dump manpage</a> for more details on the complicity API.</p>
<p>Please set RETVAL to be the thawed object.  (that is, return a single
scalar).</p>
<p>
</p>
<h2><a name="but__i_really__really_hate_schemas_">BUT, I REALLY, REALLY HATE SCHEMAS!</a></h2>
<p>However, maybe you are one of those folk who don't like to declare
their attributes, instead peppering hashes willy nilly, then there is
another option.</p>
<p>Instead of explicitly listing the fields you want, if you don't
specify any fields at all, then it means save ALL remaining fields
into the column.  For convenience, <code>-poof</code> is provided as a synonym
for <code>-options</code>, so you can write:</p>
<pre>
    { fields =&gt;
      { idbif =&gt; { -poof =&gt; # There goes another one!
                   {
                   },
                 }
      },
    }</pre>
<p>[ You see, Tangram::IDBIF isn't actually an intuitive DB interface.
No, an intuitive DB interface is a user interface component, and that
title is reserved for Visual Tangram.  VT expects to pick up the title
with any luck by the end of the 21st century^W RSN!</p>
<p>I Don't Believe In Fairies is actually what it stands for.  It's a
completely arbitrary name; chosen for no reason at all, and certainly
not anything to do with <em>Pixie</em>. ]</p>

[% INCLUDE footer.tt %]
