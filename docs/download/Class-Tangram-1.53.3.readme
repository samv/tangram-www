Class::Tangram version 1.52
===========================
(this is a beta version)

Class::Tangram serves to provide a base class for objects well suited
for storage into a Tangram SQL storage.

In some ways, it is similar to Class::Contract or Class::MethodMaker -
in that you define attributes for your class, and the module uses
those definitions to create what are known as ``accessor'' methods -
simply speaking, if you define class `Cheese' to have a `holes'
attribute, then you will get two functions - `Cheese->get_holes()' and
`Cheese->set_holes($x)'.  Also, there is a `Cheese->holes()' function
that behaves like a get or a set, depending on how it is called.  DWIM
is the motto.

However, it allows finer-grained specification of the types of
attributes than those other classes.  Currently the granularity is
geared towards the assumption that you're using the SQL Tangram
storage back-end - Tangram 2.

It should be stressed that storing Class::Tangram objects in a Tangram
storage, or ensuring that your classes in a Tangram storage are all
derived from Class::Tangram is not required.

This seperation is what makes Tangram what is known as ``orthogonal'',
and why you can run Tangram 2 side by side with other mapping tools.

If you want to know what the hell I'm rabbitting on about, first go to
Sound Object Logic's web site at http://www.tangram-persistence.org/,
and read the "Guided Tour" of Tangram.  It doesn't take long, and will
vastly assist `Aha!' moments whilst reading the Class::Tangram manual
page.

INSTALLATION

To install this module type the following:

   perl Makefile.PL
   make
   make test
   su root -c "make install"

Unless you're a debian freak, in which case you'll probably want to
type this:

   dpkg-buildpackage -b -uc -rfakeroot
   su root -c "dpkg -i ../libclass-tangram-perl_1.12.2-1_all.deb"

DEPENDENCIES

This module requires Set::Object 1.02 or higher.  You may also want to
install Tangram 2.03 or later.  Realistically, you'll want the latest
version of Tangram - 2.04 or (ahem) the version in CVS actually
contains quite a few important fixes for various ``corner cases''.  No
doubt SOL will shortly release this as version 2.05.

Test::Simple 0.18 and Date::Manip 0.32 is also required to run the
test suite.

UPGRADING FROM 1.13

This version has seen some major changes.  It took me a while stewing
over quite how it should work, and was perhaps spurred by a recent
digression into PHP programming.

You see, one thing that PHP does very well is associative arrays.
They behave very much like Tie::ixHash ordered hashes; a single
associative array can be accessed numerically OR with a key, with
sensible default behaviour when you change the way you access it
`mid-flight'.

It is actually a fairly rare condition algorithmically where you
actually need an ordered hash.  Algorithmically.  But pragmatically,
not having to care whether you were passing a hash or an array around
really started to make sense.  I found myself using it more often than
I thought I would, and this subtle linguistic difference in PHP paying
off handsomely here and there.

There I was thinking that I had been blind not to realise that PHP
could have been a much more sensible language for most things - until
I actually started to use it, and I started to come across the many
nasty bodges at the language design level that PHP is infested with.
Languages without a decent convention or method of encapsulation suck,
which is just one of the many reasons why PHP sucks.  But don't get me
started on that.

Actually, encapsulation was my primary motivation for writing
Class::Tangram in the first place, to avoid the breaking of it I saw
all the way through the Tangram guided tour (which obviously
Jean-Louis did for the sake of brevity, not because he likes flaunts
OO principles).

But back to the main point; PHP took two similar types of collections
- indexed arrays and associative arrays - and coaxed them into
equivalence.

So, I'm attempting to apply a similar principle with associations with
Class::Tangram.

Because, really, what is the difference between;

   1. A reference, an unordered * to 1 association
   2. A set,      an  unordered * to * association
   3. An iset,    an  unordered 1 to * association
   4. An array,   an   ordered * to * association
   5. An iarray,   an  ordered 1 to * association
   6. A hash,       a   keyed * to * association
   7. An ihash,      a  keyed 1 to * association  ?

Personally, I don't think there is much difference.  They are all
collections, just with different restraints placed on them.  The
difference between ordering and keying, as demonstrated by PHP, can be
overcome by falling back to reasonable default behaviour.  And, it was
a key enabling component of the `companion attributes' implementation.

So how do we go about making Sets, References, Arrays and Hashes
manipulextrous?

Jean-Louis' Set::Object class defines the operations applicable to
unordered collections - where each object may only exist once in the
collection (if objects could exist in it twice, it would be called a
bag, but personally I've never wanted to use this type of collection
where an ordered collection like an array would not suffice).

Those operations are:

   $set->insert(@objs)
   $set->includes(@objs)
   $set->members()
   $set->size()
   $set->remove(@objs)
   $set->clear()

[All the other methods of Set::Object do not affect the invocant
Set::Object, so I'm not concerned with them.]

In Class::Tangram version 1.04 (? I think - somewhere like that :)),
the keen eyed/clairvoyant Class::Tangram user may have noticed that I
added corresponding $instance->attribute_foo() functions, where foo is
a function from the above list.  All in the name of encapsulation.

So you'd replace

   $obj->{set}->insert(@objs) with $obj->set_insert(@objs);
   $obj->{set}->includes(@x)  with $obj->set_includes(@x);
   $obj->{set}->members()     with ($obj->set)
   $obj->{set}->size()        with $obj->set_size();
   $obj->{set}->remove(@objs) with $obj->set_remove(@objs);
   $obj->{set}->clear()       with $obj->set_clear()      

You may notice that the `members' method is conspicuously absent from
the Class::Tangram auto-defined functions; I decided that array vs
scalar context was explicit enough.  In scalar context, you still get
the container back, if you need it.

My primary motivation for this was that I wasn't happy with dealing
with the container objects in my application logic.  It seemed to be a
kind of implicit violation of encapsulation, to assume that an
attribute of an object was a set, and could therefore have all these
->insert() etc methods called on it.

Just think - if you changed a set attribute to an array, you would
have to do something really hairy with overloading to have an array
behave as if it were a set, or face re-writing the code that uses it.

However, using the Class::Tangram autogenerated methods, you could
just write the $obj->attribute_insert(), $obj->attribute_includes, etc
functions to remain backwards compatibility with an unknown quantity
of application logic that assumed that the attribute was a set.  Of
course, it would not help going the other way.  This still perplexed
me.

At about the same time, I made `array' and `hash' attribute types do
something similar;

   @{$obj->{array}}       would become ($obj->array)
   $obj->{array}->[7]     would become $obj->array(7)
   @{$obj->{array}}[7,42] would become ($obj->array(7,42))

Of course, in scalar context it still returned the ARRAY reference, so
these would also work, if it suited you:

   @{$obj->{array}}       could also become @{$obj->array}
   $obj->{array}->[7]     could also become $obj->array->[7]
   @{$obj->{array}}[7,42] could also become @{$obj->array}[7,42]

Similarly with HASH collections;

  %{$obj->{hash}}        would become ($obj->hash)
  $obj->{hash}->{$key}   would become $obj->hash($key)
  @{$obj->{hash}}{@keys} would become ($obj->hash(@keys))

[note: the second of those probably didn't even work due to a
 scalar/list context bug, fixed in this release]

So, in some sense this is already blurring the distinction between
hash and array attributes - in list context, you're getting back a
list of objects, and fetching them by ID (be it numerical or textual)
is performed in the same way.  But how do we make them really, really
fantastically identical?

Well, make them all conform to the same `interface', of course.
Unfortunately interface definitions are absent from a Perl
programmer's lexical toolset.

The nicest way to solve this problem would be to make a generic
``Container'' class, that Set::Object, Ref::Object, Array::Object and
Hash::Object derive from.  This would provide a nice class structure
to overload all of the collection manipulation operations, and us OO
purists could go nuts. (note: to my knowledge, only Set::Object has
actually been written, the builtin types generally serving the
required functions).

Then, we could safely use $object->collection->insert("Foo") and
everyone would be happy.  Unfortunately, Perl's inbuilt Classes for
RV's (Reference Values - the type of scalar that `ref($scalar)'
returns a true value to), hashes and arrays are not subject to
manipulation using OO terms.

So, I considered diving right in and making a Container class, that
through `overload' provided dereferencing methods for '${}'
(interpreting a collection as a REF), '@{}' (interpreting a collection
as an ARRAY), '%{}' (interpreting a collection as a HASH), as well as
all of the Set::Object methods.

I've written a man page and designed the algorithm for the above
module; see README.Containers.

For now I've taken what seems to be the easy way out, and am defining
$object->collection_insert(), $object->collection_clear(), etc
functions for all the collection types.  These can easily be emulated
with wrappers calling $object->collection->insert() once the above
module is finished.

So, now the following functions are recommended for general use; these
collectively form the Class::Tangram collection interface definition.

Inserting into a collection
===========================

  $object->foo_insert([$key => ] $value)

  instead of push @{$object->foo}

          or @{$object->foo} =
	         ( @{$object->foo}[0 .. $key-1],
 	           $value,
                   @{$object->foo}[$key .. $#{$object->foo}] )
           [these four lines of nonsense are just inserting into an
	    array, of course]

          or $object->foo->{$key} = $value
	  or $object->set->insert($value)
          or $object->set_foo($value)

A key is detected in the passed parameters by virtue of being a flat
value rather than a reference.  Keys provided for (non-keyed)
Set::Object and reference containers are silently ignored.  If a
string key is provided for an array type, then it is silently
converted to a PUSH to the end of the array.  If a numeric key is
provided for a hash key, then it is treated as a string.

Inserting an object into a reference collection - which can only
contain one element - is a different matter.  This generates a run
time warning that your container has overflowed.  If necessary, the
object which is `pushed out' is `told' of the fact - see the later
section on COMPANION CLASSES.

Replacing an existing value in a collection
===========================================

  $object->foo_replace([$key =>] $value)

  instead of $object->foo->[$key] = $value    # i?array
          or $object->foo->{$key} = $value    # i?hash
          or $object->{foo}       = $value    # ref
          or $object->foo->insert($value)     # i?set

Keys used in non-keyed sets are ignored.  A key is detected in the
passed parameters by virtue of being a scalar.

Note that for unordered sets, this function is exactly equivalent to
$object->foo_insert($value)

Removing an object from a collection
====================================

  $object->foo_remove($key | $value);

Testing for the presence of an item in a collection
===================================================

  $object->foo_includes($key | $value);

Testing for the number of items in a collection
===============================================
  $object->foo_size();

Emptying a collection
=====================
  $object->foo_clear()      

Setting a collection to consist of only a single object
=======================================================
  $object->set_foo($object)


Right.  Now you've got all that, the first application of it;
companion associations.

If you add the special keyword `companion' to an attribute definition,
the `set_attribute' function will do something special; on every
update of the attribute, it will compare the members of the collection
before and after.

Objects that are new will have their `companion_insert' method called.
Objects that are gone will have their `companion_remove' method called.

See the test script t/04-containers.t for a few examples of what this
does.

In other news, support for Perl 5.005 has finally been neglected.

UPGRADING FROM 1.11

The biggest change is that previously, if you wanted to override what
happens when you get or set an attribute, you should have defined
set() and get() functions in your derived class.  Now, you are going
to have to define methods called get_attribute() and/or
set_attribute().  attribute() is a virtual method that calls
get_attribute() or set_attribute() - depending on the number of
arguments given - so don't override that unless you understand the
consequences.

The semantics for specifying an object's fields has changed slightly;
instead of defining $YourClass::schema, you should define
$YourClass::fields, which should contain what
$YourClass::schema->{fields} used to contain.  The module still looks
in the old location, so don't fret about changing your modules too
much :-).

UPGRADING FROM 1.09

There is only a very minor source incompatible change, that would
affect people who used tied values for their init_default attribute
options.  ie, it should not affect anyone.  e-mail me if the new
behaviour is not what you want!

UPGRADING FROM 1.07

There are no backwards-incompatibile changes in this release, unless
you have another Tangram::Type that provides the tangram type
"transient".

UPGRADING FROM 1.06

Most users should be able to install the new version without problems.

However, there are a few small places where slight changes could
affect your code.

   1. If you have an attribute that is an array or a flat array, and
      you evaluate it in list context, it now returns the contents of
      the array rather than a reference to the array.  This is keeping
      in line with the way Set::Object attributes work.

   2. If you were using the bogus "time" or "timestamp" types, you
      will need to switch to "rawtime", "rawdatetime" or "dmdatetime".

COPYRIGHT AND LICENCE

Copyright (C) 2001, 2002 Sam Vilain.  All Rights Reserved.  This
module is free software. It may be used, redistributed and/or modified
under the terms of the Perl Artistic License

